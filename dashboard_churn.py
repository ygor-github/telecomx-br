import streamlit as st
import pandas as pd
import plotly.express as px

# --- ConfiguraÃ§Ãµes da PÃ¡gina ---
st.set_page_config(
    page_title="Dashboard de AnÃ¡lise de Churn de Telecom",
    page_icon="ğŸ“Š",
    layout="wide", # Permite que o conteÃºdo ocupe toda a largura da pÃ¡gina
)

# --- FunÃ§Ã£o Auxiliar para Plotar GrÃ¡ficos de Categoria no Segmento ---
def plot_segment_category(df_segment, col_name):
    # Tratar colunas binÃ¡rias para mostrar 'Sim'/'NÃ£o' se for o caso
    if df_segment[col_name].dtype in ['int64', 'float64'] and df_segment[col_name].nunique() <= 2:
        value_counts = df_segment[col_name].value_counts(normalize=True) * 100
        data_to_plot = pd.DataFrame({
            'Categoria': ['NÃ£o' if v == 0 else 'Sim' for v in value_counts.index],
            'Porcentagem': value_counts.values
        })
        title = f'DistribuiÃ§Ã£o de {col_name.replace("_", " ")}'
        fig = px.bar(
            data_to_plot,
            x='Categoria',
            y='Porcentagem',
            title=title,
            labels={'Porcentagem': 'Porcentagem', 'Categoria': col_name.replace("_", " ")},
            template='plotly_white'
        )
    else: # Para colunas categÃ³ricas (object) com mais de 2 categorias
        value_counts = df_segment[col_name].value_counts(normalize=True) * 100
        data_to_plot = value_counts.reset_index()
        data_to_plot.columns = ['Categoria', 'Porcentagem']
        title = f'DistribuiÃ§Ã£o de {col_name.replace("_", " ")}'
        fig = px.bar(
            data_to_plot,
            x='Categoria',
            y='Porcentagem',
            title=title,
            labels={'Porcentagem': 'Porcentagem', 'Categoria': col_name.replace("_", " ")},
            template='plotly_white'
        )
    st.plotly_chart(fig, use_container_width=True)       



# --- Carregamento dos Dados ---
@st.cache_data # Decorador para cachear os dados e evitar recarregamento a cada interaÃ§Ã£o
def load_data():
    try:
        df = pd.read_parquet('telecom_churn_processed_data.parquet')
        return df
    except FileNotFoundError:
        st.error("Erro: O arquivo 'telecom_churn_processed_data.parquet' nÃ£o foi encontrado. Certifique-se de que ele estÃ¡ na mesma pasta que este script.")
        st.stop() # Interrompe a execuÃ§Ã£o do script se o arquivo nÃ£o for encontrado

df = load_data()

# --- TÃ­tulo do Dashboard ---
st.title("ğŸ“Š AnÃ¡lise ExploratÃ³ria de Churn de Clientes de Telecom")
st.markdown("""
Este dashboard permite explorar a distribuiÃ§Ã£o da variÃ¡vel Churn e sua relaÃ§Ã£o com diversas caracterÃ­sticas dos clientes.
""")

# --- 1. VisÃ£o Geral da DistribuiÃ§Ã£o de Churn ---
st.header("1. DistribuiÃ§Ã£o Geral do Churn")
churn_counts = df['Churn'].value_counts(normalize=True) * 100
churn_data = pd.DataFrame({
    'EvasÃ£o': ['NÃ£o' if c == 0 else 'Sim' for c in churn_counts.index],
    'Porcentagem': churn_counts.values
})

fig_churn_pie = px.pie(
    churn_data,
    values='Porcentagem',
    names='EvasÃ£o',
    title='ProporÃ§Ã£o de Clientes com Churn vs. Sem Churn',
    color_discrete_map={'NÃ£o': 'blue', 'Sim': 'red'}
)
st.plotly_chart(fig_churn_pie, use_container_width=True)

st.markdown("""
**ObservaÃ§Ã£o:** A proporÃ§Ã£o de clientes que evadiram (`Churn = Sim`) em relaÃ§Ã£o aos que permaneceram (`Churn = NÃ£o`) Ã© um insight inicial crucial para entender a magnitude do problema de churn na base de clientes.
""")

# --- 2. AnÃ¡lise de Churn por VariÃ¡veis CategÃ³ricas ---
st.header("2. Churn por VariÃ¡veis CategÃ³ricas")

# Identificar colunas categÃ³ricas (object e as que convertemos para 0/1)
categorical_cols = df.select_dtypes(include='object').columns.tolist()
# Adicionar as colunas binÃ¡rias que agora sÃ£o int64/float64 mas representam categorias
# Exclua 'ID_Cliente' e 'Churn'
all_binary_cols_names = [
    'Cliente_Senior', 'Tem_Parceiro', 'Tem_Dependentes', 'Servico_Telefone',
    'Multiplas_Linhas', 'Seguranca_Online', 'Backup_Online', 'Protecao_Dispositivo',
    'Suporte_Tecnico', 'Streaming_TV', 'Streaming_Filmes', 'Fatura_Digital'
]
# Adicionar tambÃ©m as que eram object mas agora sÃ£o numÃ©ricas
categorical_cols_for_display = [col for col in df.columns if col in all_binary_cols_names + ['Genero', 'Servico_Internet', 'Tipo_Contrato', 'Metodo_Pagamento']]
# Remover ID_Cliente e Churn se por acaso foram adicionadas
if 'ID_Cliente' in categorical_cols_for_display:
    categorical_cols_for_display.remove('ID_Cliente')
if 'Churn' in categorical_cols_for_display:
    categorical_cols_for_display.remove('Churn')

selected_category = st.selectbox(
    "Selecione uma VariÃ¡vel CategÃ³rica para Analisar Churn:",
    options=categorical_cols_for_display
)

if selected_category:
    churn_by_category = df.groupby(selected_category)['Churn'].value_counts(normalize=True).unstack() * 100
    churn_by_category = churn_by_category.fillna(0) # Preencher NaN com 0 para categorias sem churn

    # Renomear as colunas de churn para 'NÃ£o Churn' e 'Sim Churn' para o grÃ¡fico
    churn_by_category.columns = ['NÃ£o Churn', 'Sim Churn']

    # Resetar Ã­ndice para usar Plotly Express
    churn_by_category = churn_by_category.reset_index()

    fig_cat_churn = px.bar(
        churn_by_category,
        x=selected_category,
        y=['NÃ£o Churn', 'Sim Churn'], # Stacked bar for proportions
        title=f'ProporÃ§Ã£o de Churn por {selected_category.replace("_", " ")}',
        labels={'value': 'Porcentagem de Clientes', 'variable': 'EvasÃ£o'},
        template='plotly_white',
        barmode='group' # Para ver 'NÃ£o Churn' e 'Sim Churn' lado a lado para cada categoria
    )
    fig_cat_churn.update_layout(yaxis_title='Porcentagem de Clientes', legend_title='EvasÃ£o')
    # Mapear 0/1 para NÃ£o/Sim na legenda se a coluna for binÃ¡ria
    if selected_category in all_binary_cols_names:
        st.markdown(f"**Nota:** Para '{selected_category.replace('_', ' ')}', 0 = NÃ£o, 1 = Sim.")

    st.plotly_chart(fig_cat_churn, use_container_width=True)

    st.markdown(f"""
    **Insights para {selected_category.replace("_", " ")}:** Este grÃ¡fico de barras mostra como a proporÃ§Ã£o de churn (`Sim Churn`) varia entre as diferentes categorias de `{selected_category.replace("_", " ")}`. Permite identificar segmentos de clientes com maior ou menor propensÃ£o a evadir.
    """)

# --- 3. AnÃ¡lise de Churn por VariÃ¡veis NumÃ©ricas ---
st.header("3. Churn por VariÃ¡veis NumÃ©ricas")

numeric_cols = ['Meses_Contrato', 'Custo_Mensal', 'Custo_Total', 'Custo_Diario']

selected_numeric = st.selectbox(
    "Selecione uma VariÃ¡vel NumÃ©rica para Analisar Churn:",
    options=numeric_cols
)

if selected_numeric:
    fig_num_churn = px.histogram(
        df,
        x=selected_numeric,
        color='Churn',
        nbins=50,
        histnorm='percent',
        title=f'DistribuiÃ§Ã£o de {selected_numeric.replace("_", " ")} por Churn',
        labels={selected_numeric: selected_numeric.replace("_", " "), 'count': 'Porcentagem de Clientes', 'Churn': 'EvasÃ£o'},
        template='plotly_white',
        barmode='overlay'
    )
    # Ajustar a legenda para 'NÃ£o' e 'Sim'
    fig_num_churn.for_each_trace(lambda t: t.update(name = "Sim" if t.name == "1" else "NÃ£o"))

    fig_num_churn.update_layout(
        yaxis_title='Porcentagem de Clientes',
        legend_title='EvasÃ£o',
        hovermode='x unified'
    )
    st.plotly_chart(fig_num_churn, use_container_width=True)

    st.markdown(f"""
    **Insights para {selected_numeric.replace("_", " ")}:** Este histograma mostra a distribuiÃ§Ã£o de `{selected_numeric.replace("_", " ")}` para clientes que evadiram (`Sim`) e nÃ£o evadiram (`NÃ£o`). Permite observar se hÃ¡ faixas de valores numÃ©ricos que estÃ£o mais associadas ao comportamento de churn.
    """)
    
    # --- 4. AnÃ¡lise de Causa Direta: GrÃ¡fico de DispersÃ£o ---
    st.header("4. AnÃ¡lise de DispersÃ£o (Potenciais Causas de Churn)")
    st.markdown("""
    Este grÃ¡fico de dispersÃ£o permite visualizar a relaÃ§Ã£o entre duas variÃ¡veis numÃ©ricas e a evasÃ£o (Churn).
    Ao observar a distribuiÃ§Ã£o dos pontos coloridos por Churn (0=NÃ£o, 1=Sim), Ã© possÃ­vel identificar clusters ou regiÃµes onde a evasÃ£o Ã© mais comum, sugerindo potenciais combinaÃ§Ãµes de fatores que levam ao Churn.
    """)

    # Colunas numÃ©ricas disponÃ­veis para os eixos X e Y
    scatter_numeric_cols = ['Meses_Contrato', 'Custo_Mensal', 'Custo_Total', 'Custo_Diario']

    col1, col2 = st.columns(2)

    with col1:
        x_axis_col = st.selectbox(
            "Selecione a VariÃ¡vel para o Eixo X:",
            options=scatter_numeric_cols,
            index=0 # Default para Meses_Contrato
        )
    with col2:
        y_axis_col = st.selectbox(
            "Selecione a VariÃ¡vel para o Eixo Y:",
            options=scatter_numeric_cols,
            index=1 # Default para Custo_Mensal
        )

    if x_axis_col and y_axis_col:
        fig_scatter = px.scatter(
            df,
            x=x_axis_col,
            y=y_axis_col,
            color='Churn',
            title=f'DispersÃ£o de {x_axis_col.replace("_", " ")} vs. {y_axis_col.replace("_", " ")} por Churn',
            labels={
                x_axis_col: x_axis_col.replace("_", " "),
                y_axis_col: y_axis_col.replace("_", " ")
            },
            template='plotly_white',
            hover_data=['ID_Cliente'] # Opcional: Mostra o ID do cliente ao passar o mouse
        )
        # Ajustar a legenda para 'NÃ£o' e 'Sim'
        fig_scatter.for_each_trace(lambda t: t.update(name = "Sim" if t.name == "1" else "NÃ£o"))

        fig_scatter.update_layout(
            legend_title='EvasÃ£o',
            hovermode='closest' # Melhor para grÃ¡ficos de dispersÃ£o
        )
        st.plotly_chart(fig_scatter, use_container_width=True)

        st.markdown(f"""
        **ObservaÃ§Ãµes para a DispersÃ£o de {x_axis_col.replace("_", " ")} vs. {y_axis_col.replace("_", " ")}:**
        * Observe a concentraÃ§Ã£o dos pontos `Sim` (EvasÃ£o) em certas Ã¡reas do grÃ¡fico. Isso pode indicar combinaÃ§Ãµes de `Meses_Contrato` e `Custo_Mensal` (ou outras variÃ¡veis) que sÃ£o mais arriscadas.
        * Por exemplo, uma alta concentraÃ§Ã£o de pontos `Sim` com `Meses_Contrato` baixo e `Custo_Mensal` alto sugere que clientes novos com altos gastos tendem a evadir.
        """)
        
        
 # --- 5. AnÃ¡lise de Segmento EspecÃ­fico: Clientes Novos com Alto Custo Mensal ---
    st.header("5. AnÃ¡lise de Clientes Novos com Alto Custo Mensal")
    st.markdown("""
    Esta seÃ§Ã£o foca em um segmento de clientes particularmente propenso ao churn:
    **Clientes com `Meses_Contrato` baixo (<= 5 meses) e `Custo_Mensal` alto (>= 70 R$).**
    Vamos analisar as caracterÃ­sticas comuns deste grupo.
    """)

    # Definir limites para o segmento (ajuste conforme sua anÃ¡lise no notebook)
    limite_meses_contrato_novo = 5
    limite_custo_mensal_alto = 70

    # Filtrar o DataFrame para este segmento especÃ­fico
    clientes_segmento_risco = df[
        (df['Meses_Contrato'] <= limite_meses_contrato_novo) &
        (df['Custo_Mensal'] >= limite_custo_mensal_alto)
    ]

    if not clientes_segmento_risco.empty:
        st.subheader(f"VisÃ£o Geral do Segmento (N = {len(clientes_segmento_risco)} clientes)")
        st.write(f"**Taxa de Churn neste segmento:** {clientes_segmento_risco['Churn'].mean() * 100:.2f}%")
        st.write(f"**Custo Mensal MÃ©dio:** {clientes_segmento_risco['Custo_Mensal'].mean():.2f} R$")
        st.write(f"**Meses de Contrato MÃ©dio:** {clientes_segmento_risco['Meses_Contrato'].mean():.2f} meses")

        st.subheader("DistribuiÃ§Ã£o de CaracterÃ­sticas CategÃ³ricas no Segmento de Risco")

        # Colunas categÃ³ricas para analisar (excluindo Churn, ID_Cliente e as jÃ¡ filtradas)
        # Manter 'Genero', 'Servico_Internet', 'Tipo_Contrato', 'Metodo_Pagamento' e as binÃ¡rias
        categorical_cols_for_segment_analysis = [
            'Genero', 'Servico_Internet', 'Tipo_Contrato', 'Metodo_Pagamento',
            'Cliente_Senior', 'Tem_Parceiro', 'Tem_Dependentes', 'Servico_Telefone',
            'Multiplas_Linhas', 'Seguranca_Online', 'Backup_Online', 'Protecao_Dispositivo',
            'Suporte_Tecnico', 'Streaming_TV', 'Streaming_Filmes', 'Fatura_Digital'
        ]

        # Criar duas colunas para layout dos grÃ¡ficos
        col_cat1, col_cat2 = st.columns(2)
        current_col = 0

        for col in categorical_cols_for_segment_analysis:
            if current_col % 2 == 0:
                with col_cat1:
                    plot_segment_category(clientes_segmento_risco, col)
            else:
                with col_cat2:
                    plot_segment_category(clientes_segmento_risco, col)
            current_col += 1

        st.markdown("""
        **Insights para o Segmento de Risco:** Os grÃ¡ficos acima revelam as proporÃ§Ãµes de cada caracterÃ­stica dentro do grupo de clientes novos com alto custo mensal. Observe quais categorias sÃ£o mais prevalentes (por exemplo, qual serviÃ§o de internet, qual tipo de contrato, etc.) para entender melhor o perfil desses clientes de alto risco.
        """)

    else:
        st.warning("NÃ£o hÃ¡ clientes que correspondam aos critÃ©rios de 'Novo com Alto Custo Mensal'. Ajuste os limites ou verifique os dados.")





# --- RodapÃ© ---
st.markdown("---")
st.markdown("Dashboard criado para anÃ¡lise exploratÃ³ria de dados de Churn de Telecom.")